package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	int lastLine = 0;
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
    	lastLine = cur_token.left;
        report_error("Sintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(lastLine);
        log.error(msg.toString());
    }
    
    /*public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }*/
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, FULL, LPAREN, RPAREN, COMMA, LBOX, RBOX, PRINT, READ, RETURN, EQUAL, VOID;
terminal String IDENT ;
terminal Boolean BOOL_CONST ;
terminal Character CHAR_CONST;
terminal Integer NUMBER_CONST;
terminal IF, ELSE, DO, WHILE, SWITCH, COLON, CASE, CONTINUE, BREAK, PLUSPLUS, MINUSMINUS;
terminal PLUS, MINUS, MUL, DIV, MOD, QUESTION, EQ, NEQ, GR, GRE, LO, LOE, ENUM;
terminal CLASS, EXTENDS, CONST, OR, AND, NEW;

nonterminal MethodDeclList MethodDeclList;
nonterminal DeclList DeclList;
nonterminal VarDecList VarDecList;
nonterminal ConstDeclList ConstDeclList;
nonterminal ClassDeclList ClassDeclList;
nonterminal ClassDecl ClassDecl;
nonterminal ConstDecl ConstDecl;
nonterminal ConstVar ConstVar;
nonterminal ConstDeclAddition ConstDeclAddition;
nonterminal FormalParamList FormalParamList;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal ActualParamList ActualParamList; 
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Relop Relop;
nonterminal Assignop Assignop;
nonterminal Unmatched Unmatched;
nonterminal Matched Matched;
nonterminal OptBox OptBox;
nonterminal CaseList CaseList;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal OptExpr OptExpr;
nonterminal TypeDecl TypeDecl;
nonterminal PrintStatement PrintStatement;
nonterminal IfStatement IfStatement;
nonterminal IfCondition IfCondition;
nonterminal And And;
nonterminal Or Or;
nonterminal Colon Colon;
nonterminal Question Question;

nonterminal Statement2 Statement2;
nonterminal VariableIdent VariableIdent;
nonterminal ExpressionStatement ExpressionStatement;
nonterminal ClassName ClassName;
nonterminal DoWhileStart DoWhileStart; 

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, VarDecl, VarDeclAddition, MethodTypeName, MethodDecl;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Condition, CondTerm, CondFact, Type, Expr, Expr1, Term, Factor, OtherDesignatorStatement;

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

DeclList ::= (DeclarationList) DeclList:D1 TypeDecl:T2 {: RESULT=new DeclarationList(D1, T2); RESULT.setLine(D1left); :}
			|	
			(NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */
			; 
			
			
TypeDecl ::= (VarTypeDeclaration) VarDecl:V1 {: RESULT=new VarTypeDeclaration(V1); RESULT.setLine(V1left); :}
			|
			(ConstTypeDeclaration) ConstDecl:C1 {: RESULT=new ConstTypeDeclaration(C1); RESULT.setLine(C1left); :}
			|
			(ClassTypeDeclaration) ClassDecl:C1 {: RESULT=new ClassTypeDeclaration(C1); RESULT.setLine(C1left); :}
			;

VarDecList ::= (VarDeclarations) VarDecList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}  
				|
				(NoVarDecl) {: RESULT=new NoVarDecl(); :} /* epsilon */
				;
				
VarDecl ::= (VarDecl) Type:varType VariableIdent:varIdent OptBox:O1 VarDeclAddition:V2 SEMI {: RESULT=new VarDecl(varType, varIdent, O1, V2); RESULT.setLine(varTypeleft); :} ;
		
VariableIdent ::= (VariableName) IDENT:varName {: RESULT=new VariableName(varName); RESULT.setLine(varNameleft); :}
				|
				(VaraibleNameError) error:e
				{: parser.report_error("Oporavak od greske pri definiciji globalne promenljive na liniji " + eleft, null);:} {: RESULT=new VaraibleNameError(); :}
				;
				
VarDeclAddition ::= (VarDeclAdd) VarDeclAddition:V1 COMMA VariableIdent:V2 OptBox:O3 {: RESULT=new VarDeclAdd(V1, V2, O3); RESULT.setLine(V1left); :}
					|	
					(NoVarDeclAdd) {: RESULT=new NoVarDeclAdd(); :} /* epsilon */ 
					;
					
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;


MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
					|
					(NoMethodDecl) {: RESULT=new NoMethodDecl(); :} /* epsilon */
					;

MethodDecl ::= (MethodDeclaration) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDecList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDeclaration(M1, F2, V3, S4); RESULT.setLine(M1left); :}
				;

MethodTypeName ::= (MetTypeName) Type:retType IDENT:methName {: RESULT=new MetTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
					| 
					(MetVoidName) VOID:retType IDENT:methName {: RESULT=new MetVoidName(methName); RESULT.setLine(methNameleft); :}
					;


ClassDecl ::= (ClassDeclSimple) ClassName:C1 LBRACE VarDecList:V2 RBRACE {: RESULT=new ClassDeclSimple(C1, V2); RESULT.setLine(C1left); :}
			| 
			(ClassDeclMethods) ClassName:C1 LBRACE VarDecList:V2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassDeclMethods(C1, V2, M3); RESULT.setLine(C1left); :}
			| 
			(ClassDeclExtends) ClassName:C1 EXTENDS Type:parentClass LBRACE VarDecList:V2 RBRACE {: RESULT=new ClassDeclExtends(C1, parentClass, V2); RESULT.setLine(C1left); :}
			| 
			(ClassDeclExtendsMethods) ClassName:C1 EXTENDS Type:parentClass LBRACE VarDecList:V2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassDeclExtendsMethods(C1, parentClass, V2, M3); RESULT.setLine(C1left); :}
			;
ClassName ::= (ClassName) CLASS IDENT:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};
				
ConstDecl ::= (ConstDecl) CONST Type:constType IDENT:constName EQUAL ConstVar:cVar ConstDeclAddition:C1 SEMI {: RESULT=new ConstDecl(constType, constName, cVar, C1); RESULT.setLine(constTypeleft); :}
			;

ConstDeclAddition ::= (ConstDeclAdd) ConstDeclAddition:C1 COMMA IDENT:constName EQUAL ConstVar:cVar {: RESULT=new ConstDeclAdd(C1, constName, cVar); RESULT.setLine(C1left); :}
					| 
					(NoConstDeclAddition) {: RESULT=new NoConstDeclAddition(); :} /* epsilon */
					;
					
ConstVar ::= (NumberConst) NUMBER_CONST:numConst {: RESULT=new NumberConst(numConst); RESULT.setLine(numConstleft); :}
			| 
			(CharConst) CHAR_CONST:charConst {: RESULT=new CharConst(charConst); RESULT.setLine(charConstleft); :}
			| 
			(BoolConst) BOOL_CONST:boolConst {: RESULT=new BoolConst(boolConst); RESULT.setLine(boolConstleft); :}
			;


FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} 
			| 
			(NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ 
			;
		
OptBox ::= (BoxYes) LBOX RBOX {: RESULT=new BoxYes(); :}
			| 
			(BoxNo) {: RESULT=new BoxNo(); :} /* epsilon */
			;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
					|
					(SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
					;
					
FormalParamDecl ::= (FormalParamDeclaration) Type:pt IDENT:pi OptBox:O1 {: RESULT=new FormalParamDeclaration(pt, pi, O1); RESULT.setLine(ptleft); :}
				|
				(ErrorFPClass) error:l
				{: parser.report_error("Oporavak greske kod formalnih parametara. Greska na liniji: " + lleft, null); :} {: RESULT=new ErrorFPClass(); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
				|
				(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;

				  
Statement ::= (Break) BREAK SEMI {: RESULT=new Break(); :}
			  |
			  (Continue) CONTINUE SEMI {: RESULT=new Continue(); :}
			  |
			  (ReturnNoExpr) RETURN SEMI {: RESULT=new ReturnNoExpr(); :}
			  |
			  (ReturnExpr) RETURN Expr:t SEMI {: RESULT=new ReturnExpr(t); RESULT.setLine(tleft); :}
			  |
			  (BracedStatement) LBRACE StatementList:S1 RBRACE {: RESULT=new BracedStatement(S1); RESULT.setLine(S1left); :}
			  |
			  (PrintStmt)PRINT LPAREN Expr:E1 RPAREN SEMI {: RESULT=new PrintStmt(E1); RESULT.setLine(E1left); :} 
			  |
			  (PrintStmtAndNumber) PRINT LPAREN Expr:E1 COMMA NUMBER_CONST:N2 RPAREN SEMI {: RESULT=new PrintStmtAndNumber(E1, N2); RESULT.setLine(E1left); :} 
			  |
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :} 
			  |
			  (Switch) SWITCH LPAREN Expr:E1 RPAREN LBRACE CaseList:C2 RBRACE {: RESULT=new Switch(E1, C2); RESULT.setLine(E1left); :}
			  |
			  (Assignment) DesignatorStatement:dest {: RESULT=new Assignment(dest); RESULT.setLine(destleft); :} 
			  |
			  (IfStmt) IfStatement:I1 {: RESULT=new IfStmt(I1); RESULT.setLine(I1left); :}
			  |
			  (DoWhile) DoWhileStart:D1 Statement:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new DoWhile(D1, S2, C3); RESULT.setLine(D1left); :}
			  ;
			  
DoWhileStart ::= (DoWhileStart) DO {: RESULT=new DoWhileStart(); :};
			  
			  
IfStatement ::= (IfWithoutElseStatementExpression) IF LPAREN IfCondition:I1 RPAREN Statement:S2 {: RESULT=new IfWithoutElseStatementExpression(I1, S2); RESULT.setLine(I1left); :}   
				|
				(IfWithElseStatementExpression) IF LPAREN IfCondition:I1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfWithElseStatementExpression(I1, S2, S3); RESULT.setLine(I1left); :}
				;
				
IfCondition ::= (IfGoodConditions) Condition:C1 {: RESULT=new IfGoodConditions(C1); RESULT.setLine(C1left); :}
			|
			(IfErrorCondition) error:l
			{: parser.report_error("Greska pri parsiranju uslova if naredbe, oporavak od greske na liniji " + lleft, null); :} {: RESULT=new IfErrorCondition(); :}
			;
			  
CaseList ::= (Case) CaseList:C1 CASE NUMBER_CONST:N2 COLON StatementList:S3 {: RESULT=new Case(C1, N2, S3); RESULT.setLine(C1left); :}
			|
			(EmptyCase) {: RESULT=new EmptyCase(); :} /* epsilon */
			;
			  
DesignatorStatement ::= (DesignatorExpression) ExpressionStatement:E1 {: RESULT=new DesignatorExpression(E1); RESULT.setLine(E1left); :} 
						|
						(DesignatorOther) OtherDesignatorStatement:O1 SEMI {: RESULT=new DesignatorOther(O1); RESULT.setLine(O1left); :}
						;
						
OtherDesignatorStatement ::= (DesignatorFuncCall) Designator:D1 LPAREN ActualPars:A2 RPAREN {: RESULT=new DesignatorFuncCall(D1, A2); RESULT.setLine(D1left); :}
							|
							(DesignatorIncrement) Designator:D1 PLUSPLUS {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorDecrement) Designator:D1 MINUSMINUS {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :}
							;
						
ExpressionStatement ::= (DesignatorAssignExpression) Designator:D1 Assignop:A2 Expr:E3 SEMI {: RESULT=new DesignatorAssignExpression(D1, A2, E3); RESULT.setLine(D1left); :}
					|
					(DesignatorError) error:err SEMI
					{: parser.report_error("Oporavak od greske kod iskaza dodele na liniji " + errleft, null); :} {: RESULT=new DesignatorError(); :}
					;
			  
			  
Condition ::= (ConditionTerm) CondTerm:C1 {: RESULT=new ConditionTerm(C1); RESULT.setLine(C1left); :}
			|
			(ConditionOr) Condition:C1 Or:O2 CondTerm:C3 {: RESULT=new ConditionOr(C1, O2, C3); RESULT.setLine(C1left); :}
			;
			
Or ::=(Or) OR {: RESULT=new Or(); :};

CondTerm ::= (ConditionFact) CondFact:C1 {: RESULT=new ConditionFact(C1); RESULT.setLine(C1left); :}
			|
			(ConditionAnd) CondTerm:C1 And:A2 CondFact:C3 {: RESULT=new ConditionAnd(C1, A2, C3); RESULT.setLine(C1left); :}
			;
			
And ::=(And) AND {: RESULT=new And(); :};
			
CondFact ::= (CondFactExpr) Expr1:expr {: RESULT=new CondFactExpr(expr); RESULT.setLine(exprleft); :}
			|
			(CondFactRelop)Expr1:expr1 Relop:R1 Expr1:expr2 {: RESULT=new CondFactRelop(expr1, R1, expr2); RESULT.setLine(expr1left); :}
			;

Expr1 ::= (AddExpr) Expr1:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
		 |
		 (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 |
		 (NegTermExpr) MINUS Term:t {: RESULT=new NegTermExpr(t); RESULT.setLine(tleft); :}
		 ;
		 
Expr ::= (ConditionExpr) Expr1:cond Question:Q1 Expr1:expr1 Colon:C2 Expr1:expr2 {: RESULT=new ConditionExpr(cond, Q1, expr1, C2, expr2); RESULT.setLine(condleft); :}
		|
		(Expresion) Expr1:expr {: RESULT=new Expresion(expr); RESULT.setLine(exprleft); :}
		;
		
Question ::= (Question) QUESTION {: RESULT=new Question(); :};

Colon ::= (Colon) COLON {: RESULT=new Colon(); :};

Term ::= (FactorTerm) Factor:t {: RESULT=new FactorTerm(t); RESULT.setLine(tleft); :} 
		|
		(MullTerm) Term:tt Mulop:M1 Factor:t {: RESULT=new MullTerm(tt, M1, t); RESULT.setLine(ttleft); :}
		;
		

Factor ::= (Const) ConstVar:c {: RESULT=new Const(c); RESULT.setLine(cleft); :}
			|
		   	(Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		   	|
		   	(FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		   	|
		   	(NewVar) NEW Type:T1 LBOX Expr:E2 RBOX {: RESULT=new NewVar(T1, E2); RESULT.setLine(T1left); :}
		   	|
		   	(FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
		   ;
		   
OptExpr ::= (YesOptExpr) LBOX Expr:E1 RBOX {: RESULT=new YesOptExpr(E1); RESULT.setLine(E1left); :}
		|
		(NoOptExpr) {: RESULT=new NoOptExpr(); :} /* epsilon */
		;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| 
			   (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
					|
					(ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
					;

Designator ::= (DesignatorIdent) IDENT:name {: RESULT=new DesignatorIdent(name); RESULT.setLine(nameleft); :}
			| 
			(DesignatorIdentList) Designator:des FULL IDENT:subName {: RESULT=new DesignatorIdentList(des, subName); RESULT.setLine(desleft); :}
			|
			(DesignatorExprList) Designator:des LBOX Expr:expr RBOX {: RESULT=new DesignatorExprList(des, expr); RESULT.setLine(desleft); :}
			;

Assignop ::= (Assign) EQUAL {: RESULT=new Assign(); :};

Relop ::= (Equal) EQ {: RESULT=new Equal(); :}
		|
		(NotEqual) NEQ {: RESULT=new NotEqual(); :}
		|
		(Greater) GR {: RESULT=new Greater(); :}
		|
		(GreaterOrEqual) GRE {: RESULT=new GreaterOrEqual(); :}
		|
		(Lower) LO {: RESULT=new Lower(); :}
		|
		(LowerOrEqual) LOE {: RESULT=new LowerOrEqual(); :}
		;

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :} 
		|
		(Subop) MINUS {: RESULT=new Subop(); :}
		;
		
Mulop ::= (Mul) MUL {: RESULT=new Mul(); :}
		|
		(Div) DIV {: RESULT=new Div(); :}
		|
		(Mod) MOD {: RESULT=new Mod(); :}
		;
		

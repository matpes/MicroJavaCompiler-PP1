package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, FULL, LPAREN, RPAREN, COMMA, LBOX, RBOX, PRINT, READ, RETURN, EQUAL, VOID;
terminal String IDENT ;
terminal Boolean BOOL_CONST ;
terminal Character CHAR_CONST;
terminal Integer NUMBER_CONST;
terminal IF, ELSE, DO, WHILE, SWITCH, COLON, CASE, CONTINUE, BREAK, PLUSPLUS, MINUSMINUS;
terminal PLUS, MINUS, MUL, DIV, MOD, QUESTION, EQ, NEQ, GR, GRE, LO, LOE, ENUM;
terminal CLASS, EXTENDS, CONST, OR, AND, NEW;

nonterminal MethodDeclList, VarDecl, DeclList, VarDecList, VarDeclAddition, ConstDeclList, ClassDeclList, ClassDecl, ConstDecl, ConstVar, ConstDeclAddition;
nonterminal FormalParamList, FormalParamDecl, FormPars, ActualPars, ActualParamList; 
nonterminal StatementList, Statement, Addop, Mulop, Relop, Assignop;
nonterminal Unmatched, Matched, OptBox, CaseList, DesignatorStatement;
nonterminal Condition, CondTerm, CondFact, OptExpr, TypeDecl, PrintStatement, IfStatement;

nonterminal Program, ProgName, Designator, MethodDecl, MethodTypeName; 
nonterminal Type, Term, Expr, Expr1, Factor, Statement2; 

precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclList LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

DeclList ::= (DeclarationList) DeclList TypeDecl
			|	
			(NoDeclarationList) /* epsilon */
			; 
			
			
TypeDecl ::= (VarTypeDeclaration) VarDecl
			|
			(ConstTypeDeclaration) ConstDecl
			|
			(ClassTypeDeclaration) ClassDecl
			;

VarDecList ::= (VarDeclarations) VarDecList VarDecl  
				|
				(NoVarDecl) /* epsilon */
				;
				
VarDecl ::= (VarDecl) Type:varType IDENT:varName OptBox VarDeclAddition SEMI ;
		
VarDeclAddition ::= (VarDeclAdd) VarDeclAddition COMMA IDENT:varName OptBox
					|	
					(NoVarDeclAdd) /* epsilon */ 
					;

Type ::= (Type) IDENT:typeName ;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl) /* epsilon */
					;

MethodDecl ::= (MethodDeclaration) MethodTypeName LPAREN FormPars RPAREN VarDecList LBRACE StatementList RBRACE
				|
				(ErrorMethodClass) error RPAREN:l
				{: parser.report_error("Greska kod formalnih parametara. Oporavljeno do ). Greska na liniji: " + lleft, null); :}
			   ;

MethodTypeName ::= (MetTypeName) Type:retType IDENT:methName
					| 
					(MetVoidName) VOID IDENT:methName
					;


ClassDecl ::= (ClassDeclSimple) CLASS IDENT:className LBRACE VarDecList RBRACE
			| 
			(ClassDeclMethods) CLASS IDENT:className LBRACE VarDecList LBRACE MethodDeclList RBRACE RBRACE
			| 
			(ClassDeclExtends) CLASS IDENT:className EXTENDS Type:parentClass LBRACE VarDecList RBRACE
			| 
			(ClassDeclExtendsMethods) CLASS IDENT:className EXTENDS Type:parentClass LBRACE VarDecList LBRACE MethodDeclList RBRACE RBRACE
			;

				
ConstDecl ::= (ConstDecl) CONST Type IDENT EQUAL ConstVar ConstDeclAddition SEMI
			;

ConstDeclAddition ::= (ConstDeclAdd) ConstDeclAddition COMMA IDENT EQUAL ConstVar
					| 
					(NoConstDeclAddition) /* epsilon */
					;
					
ConstVar ::= (NumberConst) NUMBER_CONST
			| 
			(CharConst) CHAR_CONST
			| 
			(BoolConst) BOOL_CONST
			;


FormPars ::= (FormParams) FormalParamList 
			| 
			(NoFormParam) /* epsilon */ 
			;
		
OptBox ::= (BoxYes) LBOX RBOX
			| 
			(BoxNo) /* epsilon */
			;

FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl
					|
					(SingleFormalParamDecl) FormalParamDecl
					|
					(ErrorFPCommaClass) error COMMA:l
					{: parser.report_error("Greska kod formalnih parametara, oporavljena do , na liniji: " + lleft, null); :}
					;
					
FormalParamDecl ::= (FormalParamDeclaration) Type:pt IDENT:pi OptBox
				|
				(ErrorFPClass) error RPAREN:l
				{: parser.report_error("Greska kod formalnih parametara. Oporavljeno do ). Greska na liniji: " + lleft, null); :}
				;

StatementList ::= (Statements) StatementList Statement 
				|
				(NoStmt) /* epsilon */
				;

				  
Statement ::= (Break) BREAK SEMI
			  |
			  (Continue) CONTINUE SEMI
			  |
			  (ReturnNoExpr) RETURN SEMI
			  |
			  (ReturnExpr) RETURN Expr:t SEMI
			  |
			  (BracedStatement) LBRACE StatementList RBRACE
			  |
			  (PrintStmt)PRINT LPAREN Expr RPAREN SEMI 
			  |
			  (PrintStmtAndNumber) PRINT LPAREN Expr COMMA NUMBER_CONST RPAREN SEMI 
			  |
			  (ReadStmt) READ LPAREN Designator RPAREN SEMI 
			  |
			  (Switch) SWITCH LPAREN Expr RPAREN LBRACE CaseList RBRACE
			  |
			  (Assignment) DesignatorStatement:dest SEMI 
			  |
			  (IfStmt) IfStatement
			  |
			  (DoWhile) DO Statement WHILE LPAREN Condition RPAREN SEMI
			  ;
			  
			  
IfStatement ::= (IfWithoutElseStatementExpression) IF LPAREN Condition RPAREN Statement   
				|
				(IfWithElseStatementExpression) IF LPAREN Condition RPAREN Statement ELSE Statement
				;
			  
CaseList ::= (Case) CaseList CASE NUMBER_CONST COLON StatementList
			|
			(EmptyCase) /* epsilon */
			;
			  
DesignatorStatement ::= (DesignatorAssign) Designator Assignop Expr
						|
						(DesignatorArray) Designator LPAREN ActualPars RPAREN
						|
						(DesignatorIncrement) Designator PLUSPLUS
						|
						(DesignatorDecrement) Designator MINUSMINUS
						;
			  
			  
Condition ::= (ConditionTerm) CondTerm
			|
			(ConditionOr) Condition OR CondTerm
			;
			
CondTerm ::= (ConditionFact) CondFact
			|
			(ConditionAnd) CondTerm AND CondFact
			;
			
CondFact ::= (CondFactExpr) Expr:expr
			|
			(CondFactRelop)Expr:expr1 Relop Expr:expr2
			;

Expr1 ::= (AddExpr) Expr1:te Addop Term:t
		 |
		 (TermExpr) Term:t
		 |
		 (NegTermExpr) MINUS Term:t
		 ;
		 
Expr ::= (ConditionExpr) Expr1:cond QUESTION Expr1:expr1 COLON Expr1:expr2
		|
		(Expresion) Expr1
		;

Term ::= (FactorTerm) Factor:t 
		|
		(MullTerm) Term:tt Mulop Factor:t
		;
		

Factor ::= (Const) ConstVar
			|
		   	(Var) Designator:d
		   	|
		   	(FuncCall) Designator:func LPAREN ActualPars RPAREN
		   	|
		   	(NewVar) NEW Type OptExpr
		   	|
		   	(FactorExpr) LPAREN Expr RPAREN
		   ;
		   
OptExpr ::= (YesOptExpr) LBOX Expr RBOX
		|
		(NoOptExpr) /* epsilon */
		;

ActualPars ::= (Actuals) ActualParamList 
				| 
			   (NoActuals) /* epsilon */ 
			   ;
			   
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
					|
					(ActualParam) Expr
					;

Designator ::= (DesignatorIdent) IDENT:name
			| 
			(DesignatorIdentList) Designator FULL IDENT
			|
			(DesignatorExprList) Designator LBOX Expr RBOX
			;

Assignop ::= (Assign) EQUAL;

Relop ::= (Equal) EQ
		|
		(NotEqual) NEQ
		|
		(Greater) GR
		|
		(GreaterOrEqual) GRE
		|
		(Lower) LO
		|
		(LowerOrEqual) LOE
		;

Addop ::= (Addop) PLUS 
		|
		(Subop) MINUS
		;
		
Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;


























